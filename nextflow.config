// Pipeline parameters
params {
    // Glob to capture paired-end reads, should capture R1 and R2 with brace expansion
    reads = "${projectDir}/data/fastq_subset/SRR1258338*_R{1,2}.fastq.gz"

    // Final output dir
    outdir = 'results'

    // If wanting to use Kraken with a DB that is already on file, use this param:
    krakendb_dir = null

    // If wanting to use Kraken with a custom-built DB, use this param to provide a dir with genomes to add:  
    krakendb_add = null

    // If wanting to use Kraken with a custom-built DB, use this param to provide a comma-separated list of 1 or more libraries
    // The library options are: 'archaea', 'bacteria', 'viral', 'plasmid', 'human', 'fungi', 'plant', 'protozoa', 'UniVec', 'UniVec_Core', 'nr', 'nt'
    // Example list: 'plant,viral,plasmid'
    krakendb_libs = null
    // Or provide a dir with already-downloaded libraries (not to be confused with a fully built database)
    krakendb_libdir = null

    // Parameters for Bracken
    bracken_taxlevel = "S"
    bracken_minreads = 10
    bracken_readlen = 150

    // If wanting to use Kraken with a DB that can be downloaded from the internet, use this param
    // (see https://benlangmead.github.io/aws-indexes/k2).
    // params.krakendb_url = 'https://genome-idx.s3.amazonaws.com/kraken/k2_pluspfp_20240605.tar.gz'
}

// Software environments
singularity {
    enabled = true
    autoMounts = true
}

// General process config
process.errorStrategy = 'finish' // change to 'retry' in final version

// Config specific to individual or groups of processes
process {
    withName: 'FASTP' {
        container = 'oras://community.wave.seqera.io/library/fastp:0.23.4--4ea6310369653ec7'
    }
    withName: 'KRAKEN.*' {
        container = 'oras://community.wave.seqera.io/library/kraken2:2.1.3--fb44221536fbccbe'
    }
    withName: 'KRAKENDB_BUILD' {
        time = 24.h
        memory = { 365.GB * task.attempt }
        cpus = 20
    }
    withName: 'BRACKENDB_BUILD' {
        time = 12.h
        memory = { 175.GB * task.attempt }
        cpus = 25
    }
    withName: 'KRAKENDB_DL_LIB' {
        time = 12.h
    }
    withName: 'KRAKEN' {
        time = 15.min
        memory = { 175.GB * task.attempt }
        cpus = 12
    }
    withName: 'BRACKEN.*' {
        //container = 'oras://community.wave.seqera.io/library/bracken:3.0--bf1ce37236b681dd' //! GIVES AN ERROR
        container = 'oras://community.wave.seqera.io/library/bracken:2.9--6e7be2645b4721b9'
    }
    withName: 'ASSEMBLY' {
        container = 'oras://community.wave.seqera.io/library/spades:3.15.5--5ae53542733e7564'
        memory = 40.GB
        cpus = 10
    }
    withName: 'MULTIQC' {
        container = 'oras://community.wave.seqera.io/library/multiqc:1.22.1--ac0a91c1ae1c160c'
    }
}

// Profiles
profiles {
    standard {
        process.executor = 'slurm'
        process.clusterOptions = '--account=PAS2693'
        process.time = { 60.min * task.attempt }
        process.cpus = { 1 * task.attempt }
        process.memory = { 4.GB * task.cpus }
        process.resourceLimits = [ time: 168.h ]
    }

    test_local {
        process.executor = 'local'
        process.cpus = 1
        process.memory = 1.GB
        process.resourceLimits = [ cpus: 1, memory: 1.GB, time: 1.h ]
    }

    test_slurm {
        process.executor = 'slurm'
        process.clusterOptions = '-A PAS1568'
        process.memory = 4.GB
        process.cpus = 1
        process.time = 1.h
        process.resourceLimits = [ cpus: 4, memory: 16.GB, time: 10.h ]
    }
}
